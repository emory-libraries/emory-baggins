<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="3" name="pytest" skips="0" tests="26" time="0.823"><testcase classname="tests.test_digwf.TestDigwfClient" file="tests/test_digwf.py" line="16" name="test_init" time="0.000548839569092"></testcase><testcase classname="tests.test_digwf.TestDigwfClient" file="tests/test_digwf.py" line="23" name="test_get_items" time="0.00199794769287"></testcase><testcase classname="tests.test_digwf.TestDigwfClient" file="tests/test_digwf.py" line="49" name="test_items_xml" time="0.00122833251953"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="42" name="test_object_id" time="0.00390195846558"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="46" name="test_file_title" time="0.00127387046814"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="57" name="test_bag_name" time="0.00101613998413"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="60" name="test_add_data_files" time="0.0012800693512"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="71" name="test_add_descriptive_metadata" time="0.00608515739441"></testcase><testcase classname="tests.baggers.test_bag.TestBaggee" file="tests/baggers/test_bag.py" line="80" name="test_create_bag" time="0.0526561737061"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="25" name="test_get_options" time="0.0171890258789"><failure message="TypeError: coercing to Unicode: need string or buffer, Mock found">self = &lt;test_lsdi.TestLsdiBagger instance at 0x110a0f680&gt;, mockargparse = &lt;MagicMock name=&apos;argparse&apos; id=&apos;4573898128&apos;&gt;
capsys = &lt;_pytest.capture.CaptureFixture instance at 0x110a0fd40&gt;

    @patch(&apos;baggins.baggers.lsdi.argparse&apos;)
    def test_get_options(self, mockargparse, capsys):
        mockparser = mockargparse.ArgumentParser.return_value
    
        mockopts = Mock(item_ids=[], gen_config=False)
        mockopts.config = self.test_config
        mockparser.parse_args.return_value = mockopts
    
        lbag = LsdiBagger()
        # no items specified - should exit
        with pytest.raises(SystemExit):
            lbag.get_options()
    
        # check captured output
        output = capsys.readouterr()
        assert output[0] == \
            &apos;Please specify item ids or a file for items to process\n&apos;
    
        mockargparse.ArgumentParser.assert_called_once()
        mockparser.parse_args.assert_called_once()
        mockparser.print_help.assert_called_once()
    
        mockopts.item_ids = [3031]
        mockparser.parse_args.return_value = mockopts
&gt;       lbag.get_options()

tests/baggers/test_lsdi.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
baggins/baggers/lsdi.py:137: in get_options
    self.options.item_ids = self.load_item_ids()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;baggins.baggers.lsdi.LsdiBagger object at 0x110a0ad10&gt;

    def load_item_ids(self):
        try:
&gt;           with open(self.options.file) as f:
E           TypeError: coercing to Unicode: need string or buffer, Mock found

baggins/baggers/lsdi.py:250: TypeError</failure></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="52" name="test_cli_options" time="0.00992703437805"><failure message="AssertionError: Expected &apos;generate_configfile&apos; to have been called once. Called 0 times.">self = &lt;test_lsdi.TestLsdiBagger instance at 0x1104bd368&gt;, capsys = &lt;_pytest.capture.CaptureFixture instance at 0x110a7c1b8&gt;

    def test_cli_options(self, capsys):
        lbag = LsdiBagger()
    
        # no item ids specified
        testargs = [&quot;lsdi-bagger&quot;]
        with patch.object(sys, &apos;argv&apos;, testargs):
            with pytest.raises(SystemExit):
                lbag.get_options()
            output = capsys.readouterr()
            assert &apos;Please specify item ids or a file for items to process&apos; \
                in output[0]
    
        # generate config file
        testargs = [&quot;lsdi-bagger&quot;, &quot;--generate-config&quot;, &apos;my-config-file.cfg&apos;]
        with patch.object(sys, &apos;argv&apos;, testargs):
            with patch.object(lbag, &apos;generate_configfile&apos;) as mockgen_cfg:
                # should generate config and exit
                with pytest.raises(SystemExit):
                    lbag.get_options()
                # should call generate_configfile method
&gt;               mockgen_cfg.assert_called_once()

tests/baggers/test_lsdi.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

_mock_self = &lt;MagicMock name=&apos;generate_configfile&apos; id=&apos;4573911696&apos;&gt;

    def assert_called_once(_mock_self):
        &quot;&quot;&quot;assert that the mock was called only once.
            &quot;&quot;&quot;
        self = _mock_self
        if not self.call_count == 1:
            msg = (&quot;Expected &apos;%s&apos; to have been called once. Called %s times.&quot; %
                   (self._mock_name or &apos;mock&apos;, self.call_count))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected &apos;generate_configfile&apos; to have been called once. Called 0 times.

../../VirtualEnv/baggins/lib/python2.7/site-packages/mock/mock.py:915: AssertionError</failure><system-out>Please specify item ids or a file for items to process
usage: lsdi-bagger [-h] [-f FILE] [-o OUTPUT_DIR]
                   [--generate-config GEN_CONFIG] [--config CONFIG]
                   [ITEM_IDS [ITEM_IDS ...]]

Generate bagit bags from LSDI digitized book content

positional arguments:
  ITEM_IDS              Digitization Workflow Item ID

optional arguments:
  -h, --help            show this help message and exit
  -f FILE, -file FILE   Digitization Workflow File With Item IDs
  -o OUTPUT_DIR, --output OUTPUT_DIR
                        Directory for generated bag content

Config file options:
  --generate-config GEN_CONFIG, -g GEN_CONFIG
                        Create a sample config file at the specified location,
                        including any options passed.
  --config CONFIG, -c CONFIG
                        Load the specified config file (default: $HOME/.lsdi-
                        bagger)
</system-out></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="94" name="test_setup_configparser" time="0.000823020935059"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="106" name="test_generate_configfile" time="0.00954794883728"><system-out>Config file created at /var/folders/rd/b_q2khss4mn8pnwny07hh8nn1nd_w_/T/tmpVgLjeZ
</system-out></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="134" name="test_load_configfile_valid" time="0.00121307373047"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="151" name="test_load_configfile_nonexistent" time="0.0010130405426"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="167" name="test_load_configfile_empty" time="0.00137281417847"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="182" name="test_process_multiple_items" time="0.00196290016174"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="201" name="test_process_items_toomany" time="0.00145411491394"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBagger" file="tests/baggers/test_lsdi.py" line="215" name="test_process_items_valid" time="0.00211095809937"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="264" name="test_object_id" time="0.00137639045715"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="271" name="test_object_title" time="0.00436425209045"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="276" name="test_image_files" time="0.0092670917511"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="332" name="test_page_text_files" time="0.00437068939209"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="366" name="test_data_files" time="0.00269603729248"></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="392" name="test_load_item_ids" time="0.00303912162781"><failure message="Failed: DID NOT RAISE &lt;type &apos;exceptions.IOError&apos;&gt;">self = &lt;test_lsdi.TestLsdiBaggee instance at 0x110c15908&gt;

    def test_load_item_ids(self):
        fake_fixture = &apos;fakefile_ids.csv&apos;
        true_fixture = &apos;file_ids.csv&apos;
        lbag = LsdiBagger()
        # nonexistent file
    
        lbag.options.file = os.path.join(FIXTURE_DIR, fake_fixture)
    
        # raises error when there is no file provided
        with pytest.raises(IOError):
&gt;           lbag.load_item_ids()
E           Failed: DID NOT RAISE &lt;type &apos;exceptions.IOError&apos;&gt;

tests/baggers/test_lsdi.py:403: Failed</failure><system-out>Unable to load specified csv file
</system-out></testcase><testcase classname="tests.baggers.test_lsdi.TestLsdiBaggee" file="tests/baggers/test_lsdi.py" line="425" name="test_descriptive_metadata" time="0.00204300880432"></testcase></testsuite>